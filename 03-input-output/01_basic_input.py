#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
基本输入操作 - input()函数使用

学习目标：
1. 掌握input()函数的基本用法
2. 理解input()函数返回的数据类型
3. 学会使用提示信息
4. 了解输入的基本处理方法

作者：Python基础教程
日期：2024年
"""

# ============================================================================
# 1. input()函数基础
# ============================================================================

print("=" * 50)
print("1. input()函数基础")
print("=" * 50)

# input()函数用于从用户获取输入
# 语法：input([prompt])
# 返回值：字符串类型

# 基本使用（无提示信息）
print("\n--- 基本使用示例 ---")
print("请在下面输入你的名字：")
# name = input()  # 取消注释来运行交互式输入
# print(f"你好，{name}！")

# 演示用的非交互式版本
name = "张三"  # 模拟用户输入
print(f"模拟输入：{name}")
print(f"你好，{name}！")

# ============================================================================
# 2. 带提示信息的input()
# ============================================================================

print("\n=" * 50)
print("2. 带提示信息的input()")
print("=" * 50)

# 使用提示信息让用户知道要输入什么
print("\n--- 带提示信息示例 ---")
# age = input("请输入你的年龄：")  # 取消注释来运行交互式输入
# print(f"你的年龄是：{age}")

# 演示用的非交互式版本
age = "25"  # 模拟用户输入
print("请输入你的年龄：25")
print(f"你的年龄是：{age}")

# ============================================================================
# 3. input()返回的数据类型
# ============================================================================

print("\n=" * 50)
print("3. input()返回的数据类型")
print("=" * 50)

# input()函数总是返回字符串类型
print("\n--- 数据类型演示 ---")
user_input = "123"  # 模拟用户输入数字
print(f"用户输入：{user_input}")
print(f"数据类型：{type(user_input)}")
print(f"是否为字符串：{isinstance(user_input, str)}")

# 即使输入的是数字，也会被当作字符串处理
num_input = "3.14"  # 模拟用户输入小数
print(f"\n输入的数字：{num_input}")
print(f"数据类型：{type(num_input)}")

# ============================================================================
# 4. 多行输入示例
# ============================================================================

print("\n=" * 50)
print("4. 多行输入示例")
print("=" * 50)

# 获取多个输入
print("\n--- 多行输入演示 ---")
# first_name = input("请输入你的姓：")
# last_name = input("请输入你的名：")
# city = input("请输入你的城市：")

# 演示用的非交互式版本
first_name = "张"  # 模拟用户输入
last_name = "三"   # 模拟用户输入
city = "北京"      # 模拟用户输入

print("请输入你的姓：张")
print("请输入你的名：三")
print("请输入你的城市：北京")

print(f"\n你好，{first_name}{last_name}！")
print(f"欢迎来自{city}的朋友！")

# ============================================================================
# 5. 输入的基本处理
# ============================================================================

print("\n=" * 50)
print("5. 输入的基本处理")
print("=" * 50)

# 处理输入中的空格
print("\n--- 处理空格示例 ---")
user_text = "  hello world  "  # 模拟带空格的输入
print(f"原始输入：'{user_text}'")
print(f"去除空格：'{user_text.strip()}'")
print(f"转为大写：'{user_text.strip().upper()}'")
print(f"转为小写：'{user_text.strip().lower()}'")

# 检查输入是否为空
print("\n--- 检查空输入 ---")
empty_input = ""  # 模拟空输入
valid_input = "有效输入"  # 模拟有效输入

print(f"空输入检查：'{empty_input}' -> {len(empty_input) == 0}")
print(f"有效输入检查：'{valid_input}' -> {len(valid_input) > 0}")

# ============================================================================
# 6. 实际应用示例
# ============================================================================

print("\n=" * 50)
print("6. 实际应用示例")
print("=" * 50)

# 简单的用户信息收集
print("\n--- 用户信息收集系统 ---")

# 模拟用户输入
user_name = "李四"
user_age = "30"
user_hobby = "编程"

print("=== 用户信息收集系统 ===")
print(f"请输入你的姓名：{user_name}")
print(f"请输入你的年龄：{user_age}")
print(f"请输入你的爱好：{user_hobby}")

print("\n=== 信息确认 ===")
print(f"姓名：{user_name}")
print(f"年龄：{user_age}岁")
print(f"爱好：{user_hobby}")
print("信息收集完成！")

# ============================================================================
# 7. 练习题
# ============================================================================

print("\n=" * 50)
print("7. 练习题")
print("=" * 50)

print("""
练习题：

1. 基础练习：
   - 编写程序获取用户的姓名和年龄，然后输出欢迎信息
   - 获取用户输入的两个数字（字符串形式），输出它们的拼接结果

2. 进阶练习：
   - 编写一个简单的自我介绍程序，获取姓名、年龄、城市、爱好
   - 处理用户输入的空格，确保输出格式整洁

3. 思考题：
   - 为什么input()函数总是返回字符串类型？
   - 如何处理用户不输入任何内容的情况？
   - 如何让程序更加用户友好？

4. 挑战练习：
   - 编写一个程序，获取用户的完整地址（省、市、区、详细地址）
   - 实现一个简单的问卷调查程序
""")

# ============================================================================
# 8. 知识点总结
# ============================================================================

print("\n=" * 50)
print("8. 知识点总结")
print("=" * 50)

print("""
知识点总结：

1. input()函数基础：
   - 语法：input([prompt])
   - 功能：从用户获取输入
   - 返回值：始终是字符串类型

2. 使用要点：
   - 可以提供提示信息让用户知道要输入什么
   - 返回的数据需要根据需要进行类型转换
   - 建议对输入进行基本处理（如去除空格）

3. 最佳实践：
   - 提供清晰的提示信息
   - 处理边界情况（如空输入）
   - 对输入进行适当的验证和处理

4. 注意事项：
   - input()会暂停程序执行，等待用户输入
   - 用户按回车键确认输入
   - 在实际应用中要考虑输入验证
""")

print("\n程序运行完成！")
print("建议：尝试取消注释交互式输入代码，体验真实的用户输入过程。")